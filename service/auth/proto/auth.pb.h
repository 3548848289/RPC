// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace MySvr {
namespace Auth {
class GenTicketRequest;
class GenTicketRequestDefaultTypeInternal;
extern GenTicketRequestDefaultTypeInternal _GenTicketRequest_default_instance_;
class GenTicketResponse;
class GenTicketResponseDefaultTypeInternal;
extern GenTicketResponseDefaultTypeInternal _GenTicketResponse_default_instance_;
class UpdateTicketRequest;
class UpdateTicketRequestDefaultTypeInternal;
extern UpdateTicketRequestDefaultTypeInternal _UpdateTicketRequest_default_instance_;
class UpdateTicketResponse;
class UpdateTicketResponseDefaultTypeInternal;
extern UpdateTicketResponseDefaultTypeInternal _UpdateTicketResponse_default_instance_;
class VerifyTicketRequest;
class VerifyTicketRequestDefaultTypeInternal;
extern VerifyTicketRequestDefaultTypeInternal _VerifyTicketRequest_default_instance_;
class VerifyTicketResponse;
class VerifyTicketResponseDefaultTypeInternal;
extern VerifyTicketResponseDefaultTypeInternal _VerifyTicketResponse_default_instance_;
}  // namespace Auth
}  // namespace MySvr
PROTOBUF_NAMESPACE_OPEN
template<> ::MySvr::Auth::GenTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::GenTicketRequest>(Arena*);
template<> ::MySvr::Auth::GenTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::GenTicketResponse>(Arena*);
template<> ::MySvr::Auth::UpdateTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::UpdateTicketRequest>(Arena*);
template<> ::MySvr::Auth::UpdateTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::UpdateTicketResponse>(Arena*);
template<> ::MySvr::Auth::VerifyTicketRequest* Arena::CreateMaybeMessage<::MySvr::Auth::VerifyTicketRequest>(Arena*);
template<> ::MySvr::Auth::VerifyTicketResponse* Arena::CreateMaybeMessage<::MySvr::Auth::VerifyTicketResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MySvr {
namespace Auth {

// ===================================================================

class GenTicketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.GenTicketRequest) */ {
 public:
  inline GenTicketRequest() : GenTicketRequest(nullptr) {};
  virtual ~GenTicketRequest();

  GenTicketRequest(const GenTicketRequest& from);
  GenTicketRequest(GenTicketRequest&& from) noexcept
    : GenTicketRequest() {
    *this = ::std::move(from);
  }

  inline GenTicketRequest& operator=(const GenTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenTicketRequest& operator=(GenTicketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenTicketRequest* internal_default_instance() {
    return reinterpret_cast<const GenTicketRequest*>(
               &_GenTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenTicketRequest& a, GenTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenTicketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenTicketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenTicketRequest* New() const final {
    return CreateMaybeMessage<GenTicketRequest>(nullptr);
  }

  GenTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenTicketRequest& from);
  void MergeFrom(const GenTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.GenTicketRequest";
  }
  protected:
  explicit GenTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 expire_time = 2;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int32 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.GenTicketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class GenTicketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.GenTicketResponse) */ {
 public:
  inline GenTicketResponse() : GenTicketResponse(nullptr) {};
  virtual ~GenTicketResponse();

  GenTicketResponse(const GenTicketResponse& from);
  GenTicketResponse(GenTicketResponse&& from) noexcept
    : GenTicketResponse() {
    *this = ::std::move(from);
  }

  inline GenTicketResponse& operator=(const GenTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenTicketResponse& operator=(GenTicketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenTicketResponse* internal_default_instance() {
    return reinterpret_cast<const GenTicketResponse*>(
               &_GenTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenTicketResponse& a, GenTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenTicketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenTicketResponse* New() const final {
    return CreateMaybeMessage<GenTicketResponse>(nullptr);
  }

  GenTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenTicketResponse& from);
  void MergeFrom(const GenTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.GenTicketResponse";
  }
  protected:
  explicit GenTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticket();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticket(
      std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.GenTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class VerifyTicketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.VerifyTicketRequest) */ {
 public:
  inline VerifyTicketRequest() : VerifyTicketRequest(nullptr) {};
  virtual ~VerifyTicketRequest();

  VerifyTicketRequest(const VerifyTicketRequest& from);
  VerifyTicketRequest(VerifyTicketRequest&& from) noexcept
    : VerifyTicketRequest() {
    *this = ::std::move(from);
  }

  inline VerifyTicketRequest& operator=(const VerifyTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyTicketRequest& operator=(VerifyTicketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyTicketRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyTicketRequest*>(
               &_VerifyTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VerifyTicketRequest& a, VerifyTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyTicketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyTicketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyTicketRequest* New() const final {
    return CreateMaybeMessage<VerifyTicketRequest>(nullptr);
  }

  VerifyTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyTicketRequest& from);
  void MergeFrom(const VerifyTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.VerifyTicketRequest";
  }
  protected:
  explicit VerifyTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTicketFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticket();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticket(
      std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.VerifyTicketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class VerifyTicketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.VerifyTicketResponse) */ {
 public:
  inline VerifyTicketResponse() : VerifyTicketResponse(nullptr) {};
  virtual ~VerifyTicketResponse();

  VerifyTicketResponse(const VerifyTicketResponse& from);
  VerifyTicketResponse(VerifyTicketResponse&& from) noexcept
    : VerifyTicketResponse() {
    *this = ::std::move(from);
  }

  inline VerifyTicketResponse& operator=(const VerifyTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyTicketResponse& operator=(VerifyTicketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyTicketResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyTicketResponse*>(
               &_VerifyTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VerifyTicketResponse& a, VerifyTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyTicketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyTicketResponse* New() const final {
    return CreateMaybeMessage<VerifyTicketResponse>(nullptr);
  }

  VerifyTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyTicketResponse& from);
  void MergeFrom(const VerifyTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.VerifyTicketResponse";
  }
  protected:
  explicit VerifyTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.VerifyTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class UpdateTicketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.UpdateTicketRequest) */ {
 public:
  inline UpdateTicketRequest() : UpdateTicketRequest(nullptr) {};
  virtual ~UpdateTicketRequest();

  UpdateTicketRequest(const UpdateTicketRequest& from);
  UpdateTicketRequest(UpdateTicketRequest&& from) noexcept
    : UpdateTicketRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTicketRequest& operator=(const UpdateTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTicketRequest& operator=(UpdateTicketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTicketRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTicketRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTicketRequest*>(
               &_UpdateTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateTicketRequest& a, UpdateTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTicketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTicketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTicketRequest* New() const final {
    return CreateMaybeMessage<UpdateTicketRequest>(nullptr);
  }

  UpdateTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTicketRequest& from);
  void MergeFrom(const UpdateTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.UpdateTicketRequest";
  }
  protected:
  explicit UpdateTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTicketFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticket();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticket(
      std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.UpdateTicketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class UpdateTicketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MySvr.Auth.UpdateTicketResponse) */ {
 public:
  inline UpdateTicketResponse() : UpdateTicketResponse(nullptr) {};
  virtual ~UpdateTicketResponse();

  UpdateTicketResponse(const UpdateTicketResponse& from);
  UpdateTicketResponse(UpdateTicketResponse&& from) noexcept
    : UpdateTicketResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTicketResponse& operator=(const UpdateTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTicketResponse& operator=(UpdateTicketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTicketResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTicketResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTicketResponse*>(
               &_UpdateTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateTicketResponse& a, UpdateTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTicketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTicketResponse* New() const final {
    return CreateMaybeMessage<UpdateTicketResponse>(nullptr);
  }

  UpdateTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTicketResponse& from);
  void MergeFrom(const UpdateTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MySvr.Auth.UpdateTicketResponse";
  }
  protected:
  explicit UpdateTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticket();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticket(
      std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:MySvr.Auth.UpdateTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenTicketRequest

// string user_id = 1;
inline void GenTicketRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GenTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketRequest.user_id)
  return _internal_user_id();
}
inline void GenTicketRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketRequest.user_id)
}
inline std::string* GenTicketRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GenTicketRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GenTicketRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenTicketRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketRequest.user_id)
}
inline void GenTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketRequest.user_id)
}
inline void GenTicketRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketRequest.user_id)
}
inline std::string* GenTicketRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenTicketRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketRequest.user_id)
}
inline std::string* GenTicketRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.GenTicketRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GenTicketRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.GenTicketRequest.user_id)
}

// int32 expire_time = 2;
inline void GenTicketRequest::clear_expire_time() {
  expire_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenTicketRequest::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GenTicketRequest::expire_time() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketRequest.expire_time)
  return _internal_expire_time();
}
inline void GenTicketRequest::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expire_time_ = value;
}
inline void GenTicketRequest::set_expire_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketRequest.expire_time)
}

// -------------------------------------------------------------------

// GenTicketResponse

// string ticket = 1;
inline void GenTicketResponse::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GenTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketResponse.ticket)
  return _internal_ticket();
}
inline void GenTicketResponse::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketResponse.ticket)
}
inline std::string* GenTicketResponse::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketResponse.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& GenTicketResponse::_internal_ticket() const {
  return ticket_.Get();
}
inline void GenTicketResponse::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenTicketResponse::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketResponse.ticket)
}
inline void GenTicketResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketResponse.ticket)
}
inline void GenTicketResponse::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketResponse.ticket)
}
inline std::string* GenTicketResponse::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketResponse.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenTicketResponse::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketResponse.ticket)
}
inline std::string* GenTicketResponse::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.GenTicketResponse.ticket)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticket_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GenTicketResponse::unsafe_arena_set_allocated_ticket(
    std::string* ticket) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticket, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.GenTicketResponse.ticket)
}

// string message = 2;
inline void GenTicketResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GenTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.GenTicketResponse.message)
  return _internal_message();
}
inline void GenTicketResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.GenTicketResponse.message)
}
inline std::string* GenTicketResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.GenTicketResponse.message)
  return _internal_mutable_message();
}
inline const std::string& GenTicketResponse::_internal_message() const {
  return message_.Get();
}
inline void GenTicketResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenTicketResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.GenTicketResponse.message)
}
inline void GenTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.GenTicketResponse.message)
}
inline void GenTicketResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.GenTicketResponse.message)
}
inline std::string* GenTicketResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.GenTicketResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenTicketResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.GenTicketResponse.message)
}
inline std::string* GenTicketResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.GenTicketResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GenTicketResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.GenTicketResponse.message)
}

// -------------------------------------------------------------------

// VerifyTicketRequest

// string user_id = 1;
inline void VerifyTicketRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketRequest.user_id)
  return _internal_user_id();
}
inline void VerifyTicketRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline std::string* VerifyTicketRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& VerifyTicketRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void VerifyTicketRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyTicketRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline void VerifyTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline void VerifyTicketRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline std::string* VerifyTicketRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyTicketRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketRequest.user_id)
}
inline std::string* VerifyTicketRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.VerifyTicketRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyTicketRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.VerifyTicketRequest.user_id)
}

// string ticket = 2;
inline void VerifyTicketRequest::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyTicketRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketRequest.ticket)
  return _internal_ticket();
}
inline void VerifyTicketRequest::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline std::string* VerifyTicketRequest::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketRequest.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& VerifyTicketRequest::_internal_ticket() const {
  return ticket_.Get();
}
inline void VerifyTicketRequest::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyTicketRequest::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline void VerifyTicketRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline void VerifyTicketRequest::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline std::string* VerifyTicketRequest::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyTicketRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketRequest.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyTicketRequest::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketRequest.ticket)
}
inline std::string* VerifyTicketRequest::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.VerifyTicketRequest.ticket)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticket_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyTicketRequest::unsafe_arena_set_allocated_ticket(
    std::string* ticket) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticket, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.VerifyTicketRequest.ticket)
}

// -------------------------------------------------------------------

// VerifyTicketResponse

// string message = 1;
inline void VerifyTicketResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VerifyTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.VerifyTicketResponse.message)
  return _internal_message();
}
inline void VerifyTicketResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.VerifyTicketResponse.message)
}
inline std::string* VerifyTicketResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.VerifyTicketResponse.message)
  return _internal_mutable_message();
}
inline const std::string& VerifyTicketResponse::_internal_message() const {
  return message_.Get();
}
inline void VerifyTicketResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VerifyTicketResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.VerifyTicketResponse.message)
}
inline void VerifyTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.VerifyTicketResponse.message)
}
inline void VerifyTicketResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.VerifyTicketResponse.message)
}
inline std::string* VerifyTicketResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VerifyTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.VerifyTicketResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyTicketResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.VerifyTicketResponse.message)
}
inline std::string* VerifyTicketResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.VerifyTicketResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VerifyTicketResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.VerifyTicketResponse.message)
}

// -------------------------------------------------------------------

// UpdateTicketRequest

// string user_id = 1;
inline void UpdateTicketRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateTicketRequest::user_id() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketRequest.user_id)
  return _internal_user_id();
}
inline void UpdateTicketRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline std::string* UpdateTicketRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UpdateTicketRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void UpdateTicketRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateTicketRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline void UpdateTicketRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline void UpdateTicketRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline std::string* UpdateTicketRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateTicketRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateTicketRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketRequest.user_id)
}
inline std::string* UpdateTicketRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.UpdateTicketRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateTicketRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.UpdateTicketRequest.user_id)
}

// string ticket = 2;
inline void UpdateTicketRequest::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateTicketRequest::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketRequest.ticket)
  return _internal_ticket();
}
inline void UpdateTicketRequest::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline std::string* UpdateTicketRequest::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketRequest.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& UpdateTicketRequest::_internal_ticket() const {
  return ticket_.Get();
}
inline void UpdateTicketRequest::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateTicketRequest::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline void UpdateTicketRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline void UpdateTicketRequest::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline std::string* UpdateTicketRequest::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateTicketRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketRequest.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateTicketRequest::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketRequest.ticket)
}
inline std::string* UpdateTicketRequest::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.UpdateTicketRequest.ticket)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticket_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateTicketRequest::unsafe_arena_set_allocated_ticket(
    std::string* ticket) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticket, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.UpdateTicketRequest.ticket)
}

// -------------------------------------------------------------------

// UpdateTicketResponse

// string ticket = 1;
inline void UpdateTicketResponse::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateTicketResponse::ticket() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketResponse.ticket)
  return _internal_ticket();
}
inline void UpdateTicketResponse::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline std::string* UpdateTicketResponse::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketResponse.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& UpdateTicketResponse::_internal_ticket() const {
  return ticket_.Get();
}
inline void UpdateTicketResponse::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateTicketResponse::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline void UpdateTicketResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline void UpdateTicketResponse::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline std::string* UpdateTicketResponse::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateTicketResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketResponse.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateTicketResponse::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketResponse.ticket)
}
inline std::string* UpdateTicketResponse::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.UpdateTicketResponse.ticket)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticket_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateTicketResponse::unsafe_arena_set_allocated_ticket(
    std::string* ticket) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticket, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.UpdateTicketResponse.ticket)
}

// string message = 2;
inline void UpdateTicketResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:MySvr.Auth.UpdateTicketResponse.message)
  return _internal_message();
}
inline void UpdateTicketResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:MySvr.Auth.UpdateTicketResponse.message)
}
inline std::string* UpdateTicketResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:MySvr.Auth.UpdateTicketResponse.message)
  return _internal_mutable_message();
}
inline const std::string& UpdateTicketResponse::_internal_message() const {
  return message_.Get();
}
inline void UpdateTicketResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateTicketResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MySvr.Auth.UpdateTicketResponse.message)
}
inline void UpdateTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MySvr.Auth.UpdateTicketResponse.message)
}
inline void UpdateTicketResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MySvr.Auth.UpdateTicketResponse.message)
}
inline std::string* UpdateTicketResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:MySvr.Auth.UpdateTicketResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateTicketResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MySvr.Auth.UpdateTicketResponse.message)
}
inline std::string* UpdateTicketResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MySvr.Auth.UpdateTicketResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateTicketResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MySvr.Auth.UpdateTicketResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace MySvr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
