// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authstore.proto

#include "authstore.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_authstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ticket_authstore_2eproto;
namespace MySvr {
namespace AuthStore {
class TicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ticket> _instance;
} _Ticket_default_instance_;
class SetTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTicketRequest> _instance;
} _SetTicketRequest_default_instance_;
class SetTicketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTicketResponse> _instance;
} _SetTicketResponse_default_instance_;
class GetTicketRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketRequest> _instance;
} _GetTicketRequest_default_instance_;
class GetTicketResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTicketResponse> _instance;
} _GetTicketResponse_default_instance_;
}  // namespace AuthStore
}  // namespace MySvr
static void InitDefaultsscc_info_GetTicketRequest_authstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_GetTicketRequest_default_instance_;
    new (ptr) ::MySvr::AuthStore::GetTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::GetTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTicketRequest_authstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTicketRequest_authstore_2eproto}, {}};

static void InitDefaultsscc_info_GetTicketResponse_authstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_GetTicketResponse_default_instance_;
    new (ptr) ::MySvr::AuthStore::GetTicketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::GetTicketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTicketResponse_authstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTicketResponse_authstore_2eproto}, {
      &scc_info_Ticket_authstore_2eproto.base,}};

static void InitDefaultsscc_info_SetTicketRequest_authstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_SetTicketRequest_default_instance_;
    new (ptr) ::MySvr::AuthStore::SetTicketRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::SetTicketRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetTicketRequest_authstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetTicketRequest_authstore_2eproto}, {
      &scc_info_Ticket_authstore_2eproto.base,}};

static void InitDefaultsscc_info_SetTicketResponse_authstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_SetTicketResponse_default_instance_;
    new (ptr) ::MySvr::AuthStore::SetTicketResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::SetTicketResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTicketResponse_authstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetTicketResponse_authstore_2eproto}, {}};

static void InitDefaultsscc_info_Ticket_authstore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MySvr::AuthStore::_Ticket_default_instance_;
    new (ptr) ::MySvr::AuthStore::Ticket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MySvr::AuthStore::Ticket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ticket_authstore_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ticket_authstore_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_authstore_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_authstore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_authstore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_authstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::Ticket, user_id_),
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::Ticket, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, ticket_),
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::SetTicketRequest, expire_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::SetTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::SetTicketResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::GetTicketRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::GetTicketRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, ticket_),
  PROTOBUF_FIELD_OFFSET(::MySvr::AuthStore::GetTicketResponse, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MySvr::AuthStore::Ticket)},
  { 7, -1, sizeof(::MySvr::AuthStore::SetTicketRequest)},
  { 14, -1, sizeof(::MySvr::AuthStore::SetTicketResponse)},
  { 20, -1, sizeof(::MySvr::AuthStore::GetTicketRequest)},
  { 26, -1, sizeof(::MySvr::AuthStore::GetTicketResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MySvr::AuthStore::_Ticket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MySvr::AuthStore::_SetTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MySvr::AuthStore::_SetTicketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MySvr::AuthStore::_GetTicketRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MySvr::AuthStore::_GetTicketResponse_default_instance_),
};

const char descriptor_table_protodef_authstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017authstore.proto\022\017MySvr.AuthStore\032\nbase"
  ".proto\")\n\006Ticket\022\017\n\007user_id\030\001 \001(\t\022\016\n\006tic"
  "ket\030\002 \001(\t\"P\n\020SetTicketRequest\022\'\n\006ticket\030"
  "\001 \001(\0132\027.MySvr.AuthStore.Ticket\022\023\n\013expire"
  "_time\030\002 \001(\005\"$\n\021SetTicketResponse\022\017\n\007mess"
  "age\030\001 \001(\t\"#\n\020GetTicketRequest\022\017\n\007user_id"
  "\030\001 \001(\t\"M\n\021GetTicketResponse\022\'\n\006ticket\030\001 "
  "\001(\0132\027.MySvr.AuthStore.Ticket\022\017\n\007message\030"
  "\002 \001(\t2\272\001\n\tAuthStore\022R\n\tSetTicket\022!.MySvr"
  ".AuthStore.SetTicketRequest\032\".MySvr.Auth"
  "Store.SetTicketResponse\022R\n\tGetTicket\022!.M"
  "ySvr.AuthStore.GetTicketRequest\032\".MySvr."
  "AuthStore.GetTicketResponse\032\005\210\265\030\234\rb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_authstore_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_authstore_2eproto_sccs[5] = {
  &scc_info_GetTicketRequest_authstore_2eproto.base,
  &scc_info_GetTicketResponse_authstore_2eproto.base,
  &scc_info_SetTicketRequest_authstore_2eproto.base,
  &scc_info_SetTicketResponse_authstore_2eproto.base,
  &scc_info_Ticket_authstore_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_authstore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authstore_2eproto = {
  false, false, descriptor_table_protodef_authstore_2eproto, "authstore.proto", 522,
  &descriptor_table_authstore_2eproto_once, descriptor_table_authstore_2eproto_sccs, descriptor_table_authstore_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_authstore_2eproto::offsets,
  file_level_metadata_authstore_2eproto, 5, file_level_enum_descriptors_authstore_2eproto, file_level_service_descriptors_authstore_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_authstore_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_authstore_2eproto)), true);
namespace MySvr {
namespace AuthStore {

// ===================================================================

void Ticket::InitAsDefaultInstance() {
}
class Ticket::_Internal {
 public:
};

Ticket::Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MySvr.AuthStore.Ticket)
}
Ticket::Ticket(const Ticket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.Ticket)
}

void Ticket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ticket_authstore_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Ticket::~Ticket() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.Ticket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ticket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ticket::ArenaDtor(void* object) {
  Ticket* _this = reinterpret_cast< Ticket* >(object);
  (void)_this;
}
void Ticket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ticket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ticket& Ticket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ticket_authstore_2eproto.base);
  return *internal_default_instance();
}


void Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.Ticket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ticket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MySvr.AuthStore.Ticket.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MySvr.AuthStore.Ticket.ticket"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ticket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.Ticket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.Ticket.ticket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.Ticket)
  return target;
}

size_t Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.Ticket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string ticket = 2;
  if (this->ticket().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ticket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const Ticket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ticket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.Ticket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.Ticket)
    MergeFrom(*source);
  }
}

void Ticket::MergeFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ticket().size() > 0) {
    _internal_set_ticket(from._internal_ticket());
  }
}

void Ticket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ticket::CopyFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ticket::IsInitialized() const {
  return true;
}

void Ticket::InternalSwap(Ticket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Ticket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTicketRequest::InitAsDefaultInstance() {
  ::MySvr::AuthStore::_SetTicketRequest_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::MySvr::AuthStore::Ticket*>(
      ::MySvr::AuthStore::Ticket::internal_default_instance());
}
class SetTicketRequest::_Internal {
 public:
  static const ::MySvr::AuthStore::Ticket& ticket(const SetTicketRequest* msg);
};

const ::MySvr::AuthStore::Ticket&
SetTicketRequest::_Internal::ticket(const SetTicketRequest* msg) {
  return *msg->ticket_;
}
SetTicketRequest::SetTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MySvr.AuthStore.SetTicketRequest)
}
SetTicketRequest::SetTicketRequest(const SetTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    ticket_ = new ::MySvr::AuthStore::Ticket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  expire_time_ = from.expire_time_;
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.SetTicketRequest)
}

void SetTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTicketRequest_authstore_2eproto.base);
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(expire_time_));
}

SetTicketRequest::~SetTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.SetTicketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTicketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ticket_;
}

void SetTicketRequest::ArenaDtor(void* object) {
  SetTicketRequest* _this = reinterpret_cast< SetTicketRequest* >(object);
  (void)_this;
}
void SetTicketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTicketRequest& SetTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTicketRequest_authstore_2eproto.base);
  return *internal_default_instance();
}


void SetTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.SetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
  expire_time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MySvr.AuthStore.Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expire_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.SetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.SetTicketRequest)
  return target;
}

size_t SetTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.SetTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  // int32 expire_time = 2;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expire_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.SetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.SetTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.SetTicketRequest)
    MergeFrom(*source);
  }
}

void SetTicketRequest::MergeFrom(const SetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.SetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ticket()) {
    _internal_mutable_ticket()->::MySvr::AuthStore::Ticket::MergeFrom(from._internal_ticket());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
}

void SetTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.SetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTicketRequest::CopyFrom(const SetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.SetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTicketRequest::IsInitialized() const {
  return true;
}

void SetTicketRequest::InternalSwap(SetTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTicketRequest, expire_time_)
      + sizeof(SetTicketRequest::expire_time_)
      - PROTOBUF_FIELD_OFFSET(SetTicketRequest, ticket_)>(
          reinterpret_cast<char*>(&ticket_),
          reinterpret_cast<char*>(&other->ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTicketResponse::InitAsDefaultInstance() {
}
class SetTicketResponse::_Internal {
 public:
};

SetTicketResponse::SetTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MySvr.AuthStore.SetTicketResponse)
}
SetTicketResponse::SetTicketResponse(const SetTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.SetTicketResponse)
}

void SetTicketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTicketResponse_authstore_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetTicketResponse::~SetTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.SetTicketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTicketResponse::ArenaDtor(void* object) {
  SetTicketResponse* _this = reinterpret_cast< SetTicketResponse* >(object);
  (void)_this;
}
void SetTicketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTicketResponse& SetTicketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTicketResponse_authstore_2eproto.base);
  return *internal_default_instance();
}


void SetTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.SetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MySvr.AuthStore.SetTicketResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.SetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.SetTicketResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.SetTicketResponse)
  return target;
}

size_t SetTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.SetTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.SetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.SetTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.SetTicketResponse)
    MergeFrom(*source);
  }
}

void SetTicketResponse::MergeFrom(const SetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.SetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void SetTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.SetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTicketResponse::CopyFrom(const SetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.SetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTicketResponse::IsInitialized() const {
  return true;
}

void SetTicketResponse::InternalSwap(SetTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketRequest::InitAsDefaultInstance() {
}
class GetTicketRequest::_Internal {
 public:
};

GetTicketRequest::GetTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MySvr.AuthStore.GetTicketRequest)
}
GetTicketRequest::GetTicketRequest(const GetTicketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.GetTicketRequest)
}

void GetTicketRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketRequest_authstore_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTicketRequest::~GetTicketRequest() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.GetTicketRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTicketRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTicketRequest::ArenaDtor(void* object) {
  GetTicketRequest* _this = reinterpret_cast< GetTicketRequest* >(object);
  (void)_this;
}
void GetTicketRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTicketRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketRequest& GetTicketRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketRequest_authstore_2eproto.base);
  return *internal_default_instance();
}


void GetTicketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.GetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTicketRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MySvr.AuthStore.GetTicketRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.GetTicketRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.GetTicketRequest)
  return target;
}

size_t GetTicketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.GetTicketRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.GetTicketRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.GetTicketRequest)
    MergeFrom(*source);
  }
}

void GetTicketRequest::MergeFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.GetTicketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GetTicketRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketRequest::CopyFrom(const GetTicketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.GetTicketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketRequest::IsInitialized() const {
  return true;
}

void GetTicketRequest::InternalSwap(GetTicketRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTicketResponse::InitAsDefaultInstance() {
  ::MySvr::AuthStore::_GetTicketResponse_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::MySvr::AuthStore::Ticket*>(
      ::MySvr::AuthStore::Ticket::internal_default_instance());
}
class GetTicketResponse::_Internal {
 public:
  static const ::MySvr::AuthStore::Ticket& ticket(const GetTicketResponse* msg);
};

const ::MySvr::AuthStore::Ticket&
GetTicketResponse::_Internal::ticket(const GetTicketResponse* msg) {
  return *msg->ticket_;
}
GetTicketResponse::GetTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MySvr.AuthStore.GetTicketResponse)
}
GetTicketResponse::GetTicketResponse(const GetTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_ticket()) {
    ticket_ = new ::MySvr::AuthStore::Ticket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MySvr.AuthStore.GetTicketResponse)
}

void GetTicketResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTicketResponse_authstore_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_ = nullptr;
}

GetTicketResponse::~GetTicketResponse() {
  // @@protoc_insertion_point(destructor:MySvr.AuthStore.GetTicketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ticket_;
}

void GetTicketResponse::ArenaDtor(void* object) {
  GetTicketResponse* _this = reinterpret_cast< GetTicketResponse* >(object);
  (void)_this;
}
void GetTicketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTicketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTicketResponse& GetTicketResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTicketResponse_authstore_2eproto.base);
  return *internal_default_instance();
}


void GetTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MySvr.AuthStore.GetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ticket_ != nullptr) {
    delete ticket_;
  }
  ticket_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTicketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MySvr.AuthStore.Ticket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MySvr.AuthStore.GetTicketResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTicketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MySvr.AuthStore.GetTicketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MySvr.AuthStore.GetTicketResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MySvr.AuthStore.GetTicketResponse)
  return target;
}

size_t GetTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MySvr.AuthStore.GetTicketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .MySvr.AuthStore.Ticket ticket = 1;
  if (this->has_ticket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTicketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MySvr.AuthStore.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTicketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTicketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MySvr.AuthStore.GetTicketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MySvr.AuthStore.GetTicketResponse)
    MergeFrom(*source);
  }
}

void GetTicketResponse::MergeFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MySvr.AuthStore.GetTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_ticket()) {
    _internal_mutable_ticket()->::MySvr::AuthStore::Ticket::MergeFrom(from._internal_ticket());
  }
}

void GetTicketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MySvr.AuthStore.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTicketResponse::CopyFrom(const GetTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MySvr.AuthStore.GetTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTicketResponse::IsInitialized() const {
  return true;
}

void GetTicketResponse::InternalSwap(GetTicketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTicketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AuthStore
}  // namespace MySvr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MySvr::AuthStore::Ticket* Arena::CreateMaybeMessage< ::MySvr::AuthStore::Ticket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MySvr::AuthStore::Ticket >(arena);
}
template<> PROTOBUF_NOINLINE ::MySvr::AuthStore::SetTicketRequest* Arena::CreateMaybeMessage< ::MySvr::AuthStore::SetTicketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MySvr::AuthStore::SetTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MySvr::AuthStore::SetTicketResponse* Arena::CreateMaybeMessage< ::MySvr::AuthStore::SetTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MySvr::AuthStore::SetTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MySvr::AuthStore::GetTicketRequest* Arena::CreateMaybeMessage< ::MySvr::AuthStore::GetTicketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MySvr::AuthStore::GetTicketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MySvr::AuthStore::GetTicketResponse* Arena::CreateMaybeMessage< ::MySvr::AuthStore::GetTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MySvr::AuthStore::GetTicketResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
